name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 1) 소스코드 체크아웃
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      # 2) Google Cloud 인증 (서비스 계정 JSON 사용).
      - name: 🔑 Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 3) gcloud CLI 설치 및 프로젝트 설정
      - name: 🔧 Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # 4) Docker 인증 설정
      - name: 🐳 Configure Docker
        run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev

      # 5) 환경 변수 파일 생성
      - name: 🔐 Create Environment File
        run: |
          cat <<EOF > server/.env
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          NODE_ENV=production
          ENVIRONMENT=${{ secrets.ENVIRONMENT }}

          GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}
          GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}
          API_KEY=${{ secrets.API_KEY }}
          ES_NODE=${{ secrets.ES_NODE }}
          MONGO_URI=${{ secrets.MONGO_URI }}
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          REACT_APP_GA_MEASUREMENT_ID=${{ secrets.REACT_APP_GA_MEASUREMENT_ID }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }} 
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          EOF

      # 6) 서버 이미지 빌드 & 푸시
      - name: 🏗 Build and Push Server Docker Image
        run: |
          echo "Using project ID: ${{ secrets.GCP_PROJECT_ID }}"
          if [[ -z "${{ secrets.GCP_PROJECT_ID }}" ]]; then
            echo "❌ ERROR: GCP_PROJECT_ID is empty!"
            exit 1
          fi
          
          cd server
          # multi-platform 빌드 시 --platform 플래그와 --push를 함께 사용해야 합니다.
          docker buildx build \
                --platform linux/amd64 -t asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-server/server:latest \
                --push \
                -f Dockerfile .

      # 7) 클라이언트 환경 변수 파일 생성
      - name: 🔐 Create Client Environment File
        run: |
          cat <<EOF > client/.env
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          REACT_APP_NAVER_MAP_CLIENT_ID=${{ secrets.REACT_APP_NAVER_MAP_CLIENT_ID }}
          REACT_APP_NAVER_MAP_CLIENT_SECRET=${{ secrets.REACT_APP_NAVER_MAP_CLIENT_SECRET }}
          REACT_APP_GA_MEASUREMENT_ID=${{ secrets.REACT_APP_GA_MEASUREMENT_ID }}
          EOF

      # 8) 클라이언트 이미지 빌드 & 푸시
      - name: 🏗 Build and Push Client Docker Image
        run: |
          cd client
          docker build -t asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-server/client:latest -f Dockerfile .
          docker push asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-server/client:latest

      # 9) gke-gcloud-auth-plugin 설치
      - name: 🔧 Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin --quiet

      # 10) 서버 이미지 Cloud Run에 배포 (최종 단계)
      - name: 🚀 Deploy Server to Cloud Run
        run: |
          gcloud run deploy my-server \
            --image asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-server/server:latest \
            --platform managed \
            --region asia-northeast3 \
            --port 3001 \
            --allow-unauthenticated \
            --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},MYSQL_HOST=${{ secrets.MYSQL_HOST }},MYSQL_USER=${{ secrets.MYSQL_USER }},MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }},MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }},NODE_ENV=production,ENVIRONMENT=${{ secrets.ENVIRONMENT }},API_KEY=${{ secrets.API_KEY }},ES_NODE=${{ secrets.ES_NODE }},MONGO_URI=${{ secrets.MONGO_URI }},GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }},JWT_SECRET=${{ secrets.JWT_SECRET }},EMAIL_USER=${{ secrets.EMAIL_USER }},EMAIL_PASS=${{ secrets.EMAIL_PASS }},NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }},NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }},CORS_ORIGIN=${{ secrets.CORS_ORIGIN }},GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }},GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}"

      # 11) 클라이언트 이미지 Cloud Run에 배포
      - name: 🚀 Deploy Client to Cloud Run
        run: |
          gcloud run deploy my-client \
            --image asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-server/client:latest \
            --platform managed \
            --region asia-northeast3 \
            --port 8081 \
            --allow-unauthenticated \
            --set-env-vars="REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }},REACT_APP_NAVER_MAP_CLIENT_ID=${{ secrets.REACT_APP_NAVER_MAP_CLIENT_ID }},REACT_APP_NAVER_MAP_CLIENT_SECRET=${{ secrets.REACT_APP_NAVER_MAP_CLIENT_SECRET }},REACT_APP_GA_MEASUREMENT_ID=${{ secrets.REACT_APP_GA_MEASUREMENT_ID }}"
